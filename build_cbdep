#!/bin/bash -ex

pushd `dirname $0` > /dev/null
SCRIPTPATH=`pwd -P`
popd > /dev/null

# Keep these in sync with build_cbdep.bat
PYTHON_VERSION=3.11.10
UV_VERSION=0.4.29

if [ -e /etc/os-release ]; then
    # Read $ID from os-release. Don't want to read anything else,
    # though. In particular we don't want to overwrite $VERSION.
    # So use a subshell.
    ID=$(. /etc/os-release && echo $ID)
fi

if [ "${ID}" = "alpine" ]; then
    # The self-contained Python distributions that UV installs don't work on
    # Alpine, so fall back to the version installed in the build agent.
    PYTHON_VERSION=$(python3 -c 'import platform; print(platform.python_version())')
fi

# Install UV for managing python environments
command -v uvf > /dev/null 2>&1  || {
    # If only there was some kind of tool that could automate this...
    ident="$(uname -s)::$(uname -m)::${ID}"
    case "${ident}" in
        Darwin::x86_64::*) package=uv-x86_64-apple-darwin
        ;;
        Darwin::arm64::*) package=uv-aarch64-apple-darwin
        ;;
        Linux::x86_64::alpine) package=uv-x86_64-unknown-linux-musl
        ;;
        Linux::x86_64::*) package=uv-x86_64-unknown-linux-gnu
        ;;
        # Use the linux-musl version on Alpine or non-Alpine, because
        # our single-linux aarch64 agents are based on glibc 2.17 which
        # is too old for uv's aarch64 linux-gnu builds. Fortunately the
        # linux-musl builds are static, so they work.
        Linux::aarch64::*) package=uv-aarch64-unknown-linux-musl
        ;;
        *) echo "Unknown system ${ident}!!"
        exit 5
        ;;
    esac

    if [ ! -d ${package} ]; then
        echo "Downloading ${package} ${UV_VERSION}..."
        curl -L https://github.com/astral-sh/uv/releases/download/${UV_VERSION}/${package}.tar.gz | tar xzf -
    fi
    export PATH=$(pwd)/${package}:${PATH}
}

echo Setting up Python virtual environment
BUILDDIR="$(pwd)/build"
mkdir -p "${BUILDDIR}"
uv venv --python ${PYTHON_VERSION} "${BUILDDIR}/venv"
. "${BUILDDIR}/venv/bin/activate"

echo Installing cbdep requirements
uv pip install -r ${SCRIPTPATH}/requirements.txt

# Customize _buildversion.py if build info available in environment
if [ ! -z "${VERSION}" -a ! -z "${BLD_NUM}" ]; then
    VERSIONPATH="${BUILDDIR}/version"
    mkdir -p "${VERSIONPATH}"
    cat <<EOF > "${VERSIONPATH}/_buildversion.py"
__version__ = "${VERSION}"
__build__ = "${BLD_NUM}"
EOF
else
    VERSIONPATH=""
fi

echo Compiling cbdep
PYINSTDIR=$(pwd)/build/pyinstaller
mkdir -p ${PYINSTDIR}
pyinstaller --log-level DEBUG \
    --add-data ${SCRIPTPATH}/cbdep.config:. \
    --workpath ${PYINSTDIR} \
    --specpath ${PYINSTDIR} \
    --distpath dist --noconfirm \
    --onefile --clean \
    --paths "${VERSIONPATH}:${SCRIPTPATH}/cbdep/scripts" \
    --name cbdep \
    ${SCRIPTPATH}/cbdep/scripts/main.py
